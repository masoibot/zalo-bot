const { mainNightRole, doWitchRole } = require('./mainNightRole');
const { roleName, roleImage, extractUserRole, isAlive } = require('./DataUtils');

module.exports = function goStage(bot, joinID, gameData, userID, playerList) {
    var userRole = extractUserRole(gameData, userID);
    var names = gameData.players.names;
    var roomID = gameData.roomChatID;
    let coupleID = gameData.players.coupleID;
    let coupleIndex = coupleID.indexOf(userID);
    switch (gameData.state.dayStage) {
        case 'readyToGame':
            // bot.say(joinID, {
            //     text: roleName[userRole],
            //     image: roleImage[userRole]
            // })
            break;
        case 'cupid':
            if (userRole == 7) {
                bot.say(joinID, {
                    text: `üëºGH√âP ƒê√îI\n#cupid <ng∆∞·ªùi 1> <ng∆∞·ªùi 2>\nVD: #cupid 9 7`,
                    quickReplies: Object.values(playerList)
                })
            } else {
                bot.say(joinID, `üëºTH·∫¶N T√åNH Y√äU ƒëang ph√¢n v√¢n...`);
            }
            break;
        case 'night':
            let nightNotify = ``;
            if (coupleIndex != -1) {
                nightNotify += `üíïB·∫°n c·∫∑p ƒë√¥i v·ªõi ${names[coupleID[coupleIndex == 1 ? 0 : 1]]}\n`;
            }
            if (isAlive(gameData, userID)) { // c√≤n s·ªëng
                mainNightRole(bot, joinID, roomID, gameData, userID, userRole, playerList, nightNotify);
            } else {
                bot.say(joinID, `üíÄƒê√äM R·ªíI!\nƒê√™m nay b·∫°n ƒë√£ ch·∫øt!`);
            }
            break;
        case 'superwolf':
            if (userRole == -3) {
                if (gameData.roleInfo.superWolfVictimID == "") {
                    if (gameData.roleInfo.victimID != "") {
                        bot.say(joinID, `üê∫S√ìI NGUY·ªÄN\n${gameData.players.names[gameData.roleInfo.victimID]} ƒë√£ ch·∫øt\n#nguyen ƒë·ªÉ nguy·ªÅn!\n#0nguyen ƒë·ªÉ b·ªè nguy·ªÅn!`);
                    } else {
                        bot.say(joinID, `üê∫S√ìI NGUY·ªÄN\nKh√¥ng c√≥ ai ch·∫øt c·∫£! Bu·ªìn gh√™ :v`);
                    }
                } else {
                    bot.say(joinID, `üê∫S√ìI NGUY·ªÄN\nB·∫°n ƒë√£ nguy·ªÅn 1 l·∫ßn r·ªìi!`);
                }
            } else {
                bot.say(joinID, `üê∫S√ìI NGUY·ªÄN ƒëang suy t√≠nh...`);
            }
            break;
        case 'witch':
            if (userRole == 5) {
                doWitchRole(bot, joinID, roomID, gameData, playerList);
            } else {
                bot.say(joinID, `üßô‚ÄçPH√ô TH·ª¶Y ƒëang ph√π ph√©p...`);
            }
            break;
        case 'discuss':
            let notifyDeath = ``;
            // let notifyDeath = `‚òÄTR·ªúI S√ÅNG R·ªíI!\n`;
            let superWolfVictimID = gameData.roleInfo.superWolfVictimID;
            if (superWolfVictimID === userID) {
                notifyDeath += `üê∫Nh·ªõ r·∫±ng b·∫°n l√† s√≥i!\n`
            }
            if (coupleIndex != -1) {
                notifyDeath += `üíïB·∫°n c·∫∑p ƒë√¥i v·ªõi ${names[coupleID[coupleIndex == 1 ? 0 : 1]]}\n`;
            }
            // notifyDeath += gameData.roleInfo.lastDeath.length === 0 ? `ƒê√™m qua kh√¥ng ai ch·∫øt c·∫£` : gameData.roleInfo.lastDeath.map((deathID) => {
            //     return `‚öî${names[deathID]} ƒë√£ ch·∫øt`;
            // }).join('\n');
            bot.say(joinID, `${notifyDeath}`);
            break;
        case 'vote':
            bot.say(joinID, {
                text: `VOTE\n#vote <ng∆∞·ªùi>\nVD: #vote 0`,
                quickReplies: Object.values(playerList),
            });
            break;
        // case 'voteResult':
        //     let voteResult = `K·∫æT QU·∫¢ VOTE\n`;
        //     let voteArr = {};
        //     Object.keys(gameData.roleTarget.voteList).forEach((userID, index) => {
        //         targetID = gameData.roleTarget.voteList[userID];
        //         voteArr[targetID] ? voteArr[targetID]++ : voteArr[targetID] = 1;
        //     });
        //     voteResult += Object.keys(voteArr).map((targetID, index) => {
        //         return `${index + 1}: ${names[targetID]} (${voteArr[targetID]} phi·∫øu)`;
        //     }).join('\n')
        //     voteResult += `\n`;
        //     if (gameData.roleInfo.victimID !== "") {
        //         voteResult += `${names[gameData.roleInfo.victimID]} c√≥ s·ªë vote nhi·ªÅu nh·∫•t!`;
        //     } else {
        //         voteResult += `Kh√¥ng ai b·ªã treo c·ªï!`;
        //     }
        //     bot.say(joinID, voteResult);
        //     break;
        // case 'lastWord':
        //     if (gameData.roleInfo.victimID !== "") {
        //         bot.say(joinID, `${names[gameData.roleInfo.victimID]} L√äN TH·ªöT!\nB·∫°n c√≥ 1 ph√∫t thanh minh`);
        //     } else {
        //         bot.say(joinID, `Ng∆∞·ªùi ch∆°i l√™n th·ªõt kh√¥ng h·ª£p l·ªá!\nnull_victim_invalid_error`);
        //     }
        //     break;
        case 'voteYesNo':
            bot.say(joinID, {
                text: `TREO HAY THA?`,
                quickReplies: ["#treo", "#tha"],
            });
            break;
        // case 'voteYesNoResult':
        //     let listTreo = [];
        //     let listTha = [];
        //     let victimID = gameData.roleInfo.victimID;
        //     Object.keys(gameData.roleTarget.voteList).filter((userID, index) => {
        //         if (gameData.roleTarget.voteList[userID] === victimID) {
        //             listTreo = [...listTreo, names[userID]];
        //         } else {
        //             listTha = [...listTha, names[userID]];
        //         }
        //     });
        //     bot.say(joinID, `K·∫æT QU·∫¢ THEO/THA:\n`
        //         + `${listTreo.length} Treo: ${listTreo.join(", ")}\n`
        //         + `${listTha.length} Tha: ${listTha.join(", ")}\n\n`
        //         + `${names[victimID]} ${listTreo.length > listTha.length ? `ƒë√£ b·ªã treo c·ªï theo s·ªë ƒë√¥ng!` : `v·∫´n ƒë∆∞·ª£c m·ªçi ng∆∞·ªùi tin t∆∞·ªüng!`}`
        //     );
    }
}